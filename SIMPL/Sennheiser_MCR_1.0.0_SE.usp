/*
Dealer Name: JaDeVa AB
Programmer: Niklas Olsson
*/

/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
// #DEFINE_CONSTANT
#CATEGORY "46" "Sennheiser"
#HELP_PDF_FILE "Sennheiser_MCR_1.0.0_SE.pdf"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#HELP_BEGIN
#HELP_END


/*******************************************************************************************
  Include Libraries
*******************************************************************************************/
#INCLUDEPATH "..\\SIMPL SHARP\\Sennheiser_Modules_CSharp\\bin\\Release"
#USER_SIMPLSHARP_LIBRARY "Sennheiser_Modules_CSharp"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
DIGITAL_INPUT _skip_;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Connect;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Debug;
DIGITAL_INPUT Enable_Incoming_Commands;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Enable_Rf_Quality_Feedback;
DIGITAL_INPUT Enable_Mixer_Level_Feedback;
DIGITAL_INPUT Enable_RX_Input_Level_Feedback;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Identify_On;
DIGITAL_INPUT Identify_Off;
DIGITAL_INPUT Identify_Toggle;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT RX_Identify_On[4];
DIGITAL_INPUT RX_Identify_Off[4];
DIGITAL_INPUT RX_Identify_Toggle[4];
DIGITAL_INPUT _skip_;
DIGITAL_INPUT Low_Cut_On[4];
DIGITAL_INPUT Low_Cut_Off[4];
DIGITAL_INPUT Low_Cut_Toggle[4,4];
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT _skip_;
ANALOG_INPUT Led_Brightness;
ANALOG_INPUT _skip_;
ANALOG_INPUT Dante_Output_Gain;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT Set_Name[8];
STRING_INPUT Set_Location[30];
STRING_INPUT Set_Position[30];
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT _skip_;
STRING_INPUT Send_Custom_Command[255];
STRING_INPUT _skip_;
STRING_INPUT Device_IP[15];
STRING_INPUT Device_UDP_Port[5];
STRING_INPUT _skip_;
ANALOG_INPUT RX_Output_Gain[4];
ANALOG_INPUT _skip_;
ANALOG_INPUT Eq[4,4];

DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT Responding_FB;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT Identifying_FB;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT RX_Identifying_FB[4];
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT Low_Cut_On_FB[4];
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT TX_Active_FB[4];
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT TX_Charging_FB[4,4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT Led_Brightness_FB;
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT Dante_Output_Gain_FB;
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT Mixer_Level_FB;
STRING_OUTPUT _skip_;
STRING_OUTPUT Name_FB;
STRING_OUTPUT Location_FB;
STRING_OUTPUT Position_FB;
STRING_OUTPUT Product_FB;
STRING_OUTPUT Version_FB;
STRING_OUTPUT Serial_FB;
STRING_OUTPUT Mac_Addresses_FB;
STRING_OUTPUT _skip_;
STRING_OUTPUT Dante_Ip_Addresses_FB;
STRING_OUTPUT Dante_Mac_Addresses_FB;
STRING_OUTPUT _skip_;
STRING_OUTPUT Incoming_Command_FB;
STRING_OUTPUT _skip_;
STRING_OUTPUT _skip_;
STRING_OUTPUT _skip_;
STRING_OUTPUT _skip_;
ANALOG_OUTPUT RX_Output_Gain_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT Eq_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT RF_Quality_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT RX_Input_Level_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT TX_Device_Type_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT TX_Battery_Type_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT TX_Battery_Gauge_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT TX_Battery_Health_FB[4];
ANALOG_OUTPUT _skip_;
ANALOG_OUTPUT TX_Battery_Lifetime_FB[4];
STRING_OUTPUT _skip_;
STRING_OUTPUT RFPI_FB[4];
STRING_OUTPUT _skip_;
STRING_OUTPUT Last_Paired_IPEI_FB[4];
STRING_OUTPUT _skip_;
STRING_OUTPUT RX_Warnings_FB[4];
STRING_OUTPUT _skip_;
STRING_OUTPUT TX_Warnings_FB[4,4];


/*******************************************************************************************
  Parameters
*******************************************************************************************/
STRING_PARAMETER Device_IP_Param[15];
INTEGER_PARAMETER Device_UDP_Port_Param;
INTEGER_PARAMETER Number_of_Channels;

/*******************************************************************************************
  Parameter Properties
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Device_IP_Param
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "0.0.0.0";
#END_PARAMETER_PROPERTIES
#BEGIN_PARAMETER_PROPERTIES Device_UDP_Port_Param
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 45d;
#END_PARAMETER_PROPERTIES
#BEGIN_PARAMETER_PROPERTIES Number_of_Channels
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 4d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
*******************************************************************************************/

// INTEGER
SlMcrDwSimplWrapper _device;

/*******************************************************************************************
  Functions
*******************************************************************************************/

Callback Function OnSetRespondingFb(Integer value)          { Responding_FB = value; }
Callback Function OnSetNameFb(String value)                 { Name_FB = value; }
Callback Function OnSetLocationFb(String value)             { Location_FB = value; }
Callback Function OnSetPositionFb(String value)             { Position_FB = value; }
Callback Function OnSetVersionFb(String value)              { Version_FB = value; }
Callback Function OnSetSerialFb(String value)               { Serial_FB = value; }
Callback Function OnSetProductFb(String value)              { Product_FB = value; }
Callback Function OnSetMacAddressesFb(String value)         { Mac_Addresses_FB = value; }
Callback Function OnSetLedBrightnessFb(Integer value)       { Led_Brightness_FB = value; }
Callback Function OnSetIncomingCommandFb(String value)      { Incoming_Command_FB = value; }

Callback Function OnSetIdentifyingFb(Integer value)                        { Identifying_FB = value; }
Callback Function OnSetRxIdentifyingFb(Integer index, Integer value)       { RX_Identifying_FB[index + 1] = value; }
Callback Function OnSetRfQualityFb(Integer index, Integer value)           { RF_Quality_FB[index + 1] = value; }
Callback Function OnSetRxWarningsFb(Integer index, String value)           { RX_Warnings_FB[index + 1] = value; }
Callback Function OnSetRfpiFb(Integer index, String value)                 { RFPI_FB[index + 1] = value; }
Callback Function OnSetLastPairedIpeiFb(Integer index, String value)       { Last_Paired_IPEI_FB[index + 1] = value; }

Callback Function OnSetTxActiveFb(Integer index, Integer value)            { TX_Active_FB[index + 1] = value; }
Callback Function OnSetTxDeviceTypeFb(Integer index, Integer value)        { TX_Device_Type_FB[index + 1] = value; }
Callback Function OnSetTxBatteryTypeFb(Integer index, Integer value)       { TX_Battery_Type_FB[index + 1] = value; }
Callback Function OnSetTxChargingFb(Integer index, Integer value)          { TX_Charging_FB[index + 1] = value; }
Callback Function OnSetTxBatteryGaugeFb(Integer index, Integer value)      { TX_Battery_Gauge_FB[index + 1] = value; }
Callback Function OnSetTxBatteryHealthFb(Integer index, Integer value)     { TX_Battery_Health_FB[index + 1] = value; }
Callback Function OnSetTxBatteryLifetimeFb(Integer index, Integer value)   { TX_Battery_Lifetime_FB[index + 1] = value; }
Callback Function OnSetTxWarningsFb(Integer index, String value)           { TX_Warnings_FB[index + 1] = value; }

Callback Function OnSetDanteMacAddressesFb(String value)                   { Dante_Mac_Addresses_FB = value; }
Callback Function OnSetDanteIpAddressesFb(String value)                    { Dante_Ip_Addresses_FB = value; }
Callback Function OnSetDanteOutputGainFb(Integer value)                    { Dante_Output_Gain_FB = value; }

Callback Function OnSetRxOutputGainFb(Integer index, Integer value)        { RX_Output_Gain_FB[index + 1] = value; }
Callback Function OnSetEqFb(Integer index, Integer value)                  { Eq_FB[index + 1] = value; }
Callback Function OnSetLowCutFb(Integer index, Integer value)              { Low_Cut_On_FB[index + 1] = value; }

Callback Function OnSetMixerLevelFb(Signed_Integer value)                  { Mixer_Level_FB = value; }
Callback Function OnSetRxInputLevelFb(Integer index, Signed_Integer value) { RX_Input_Level_FB[index + 1] = value; }

/*******************************************************************************************
  Event Handlers
*******************************************************************************************/
PUSH Connect                        { _device.Connect(); }
RELEASE Connect                     { _device.Disconnect(); }

CHANGE Debug                        { _device.Debug = Debug; }
CHANGE Enable_Incoming_Commands     { _device.IncomingCommandEnabled = Enable_Incoming_Commands; }

CHANGE Enable_Rf_Quality_Feedback   { _device.EnableRfQualityFeedback(Enable_Rf_Quality_Feedback); }
CHANGE Enable_Mixer_Level_Feedback  { _device.EnableMixerLevelFeedback(Enable_Mixer_Level_Feedback); }
CHANGE Enable_RX_Input_Level_Feedback { _device.EnableRxInputLevelFeedback(Enable_RX_Input_Level_Feedback); }

PUSH Identify_On                    { _device.SetIdentify(1); }
PUSH Identify_Off                   { _device.SetIdentify(0); }
PUSH Identify_Toggle                { _device.IdentifyToggle(); }

PUSH RX_Identify_On                 { _device.SetRxIdentify(GetLastModifiedArrayIndex() - 1, 1); }
PUSH RX_Identify_Off                { _device.SetRxIdentify(GetLastModifiedArrayIndex() - 1, 0); }
PUSH RX_Identify_Toggle             { _device.RxIdentifyToggle(GetLastModifiedArrayIndex() - 1); }

PUSH Low_Cut_On                     { _device.SetLowCut(GetLastModifiedArrayIndex() - 1, 1); }
PUSH Low_Cut_Off                    { _device.SetLowCut(GetLastModifiedArrayIndex() - 1, 0); }
PUSH Low_Cut_Toggle                 { _device.LowCutToggle(GetLastModifiedArrayIndex() - 1); }

CHANGE Led_Brightness               { _device.SetLedBrightness(Led_Brightness); }
CHANGE Dante_Output_Gain            { _device.SetDanteOutputGain(Dante_Output_Gain); }
CHANGE RX_Output_Gain               
{ 
    Integer index;
    index = GetLastModifiedArrayIndex();
    _device.SetOutputGain(index - 1, RX_Output_Gain[index]); 
}
CHANGE Eq                           
{ 
    Integer index;
    index = GetLastModifiedArrayIndex();
    _device.SetEq(index - 1, Eq[index]); 
}

CHANGE Set_Name                     { _device.SetName(Set_Name); }
CHANGE Set_Location                 { _device.SetLocation(Set_Location); }
CHANGE Set_Position                 { _device.SetPosition(Set_Position); }

CHANGE Device_IP                    { _device.Ip = Device_IP; }
CHANGE Device_UDP_Port              { _device.Port = Atoi(Device_UDP_Port); }

CHANGE Send_Custom_Command          { _device.Send(Send_Custom_Command); }

/*******************************************************************************************
  Main()
*******************************************************************************************/
Function Main()
{
    _device.SimplInit(Number_of_Channels);

    _device.Ip = Device_IP_Param;
    _device.Port = Device_UDP_Port_Param;
    
    RegisterDelegate(_device, SetRespondingFb, OnSetRespondingFb);
    RegisterDelegate(_device, SetNameFb, OnSetNameFb);
    RegisterDelegate(_device, SetLocationFb, OnSetLocationFb);
    RegisterDelegate(_device, SetPositionFb, OnSetPositionFb);
    RegisterDelegate(_device, SetVersionFb, OnSetVersionFb);
    RegisterDelegate(_device, SetSerialFb, OnSetSerialFb);
    RegisterDelegate(_device, SetProductFb, OnSetProductFb);
    RegisterDelegate(_device, SetMacAddressesFb, OnSetMacAddressesFb);
    RegisterDelegate(_device, SetLedBrightnessFb, OnSetLedBrightnessFb);
    RegisterDelegate(_device, SetIncomingCommandFb, OnSetIncomingCommandFb);

    RegisterDelegate(_device, SetIdentifyingFb, OnSetIdentifyingFb);
    RegisterDelegate(_device, SetRxIdentifyingFb, OnSetRxIdentifyingFb);
    RegisterDelegate(_device, SetRfQualityFb, OnSetRfQualityFb);
    RegisterDelegate(_device, SetRxWarningsFb, OnSetRxWarningsFb);
    RegisterDelegate(_device, SetRfpiFb, OnSetRfpiFb);
    RegisterDelegate(_device, SetLastPairedIpeiFb, OnSetLastPairedIpeiFb);

    RegisterDelegate(_device, SetTxActiveFb, OnSetTxActiveFb);
    RegisterDelegate(_device, SetTxDeviceTypeFb, OnSetTxDeviceTypeFb);
    RegisterDelegate(_device, SetTxBatteryTypeFb, OnSetTxBatteryTypeFb);
    RegisterDelegate(_device, SetTxChargingFb, OnSetTxChargingFb);
    RegisterDelegate(_device, SetTxBatteryGaugeFb, OnSetTxBatteryGaugeFb);
    RegisterDelegate(_device, SetTxBatteryHealthFb, OnSetTxBatteryHealthFb);
    RegisterDelegate(_device, SetTxBatteryLifetimeFb, OnSetTxBatteryLifetimeFb);
    RegisterDelegate(_device, SetTxWarningsFb, OnSetTxWarningsFb);

    RegisterDelegate(_device, SetDanteMacAddressesFb, OnSetDanteMacAddressesFb);
    RegisterDelegate(_device, SetDanteIpAddressesFb, OnSetDanteIpAddressesFb);
    RegisterDelegate(_device, SetDanteOutputGainFb, OnSetDanteOutputGainFb);

    RegisterDelegate(_device, SetRxOutputGainFb, OnSetRxOutputGainFb);
    RegisterDelegate(_device, SetEqFb, OnSetEqFb);
    RegisterDelegate(_device, SetLowCutFb, OnSetLowCutFb);

    RegisterDelegate(_device, SetMixerLevelFb, OnSetMixerLevelFb);
    RegisterDelegate(_device, SetRxInputLevelFb, OnSetRxInputLevelFb);

    // WaitForInitializationComplete();
}

